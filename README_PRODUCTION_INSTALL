#
#  Installation of a web server. [JPH 20140904]
#
#  $IP_ADDR            ip address of new server
#  $USER               jason
#  $USER_PASSWORD      xxx
#  $DATA_PASSWORD      xxx
#  $MAIL_PASSWORD      xxx
#
################################################################################

local> ssh root@$IP_ADDR
root> passwd -l root

# Create account for webserver.
root> useradd -m -s /bin/bash mo
root> passwd -l mo
root> visudo
  # Add these lines to end. Allows users in "mo" group to "sudo su mo".
  %mo ALL = NOPASSWD: /bin/su mo
  %mo ALL = NOPASSWD: /bin/su - mo

# Create user accounts.
root> useradd -m -s /bin/bash -G mo,sudo $USER
root> passwd $USER
root> mkdir /home/$USER/.ssh
root> vi /home/$USER/.ssh/authorized_keys
  # paste in your local ~/.ssh/id_rsa.pub
root> chmod 600 /home/$USER/.ssh/authorized_keys
root> chmod 700 /home/$USER/.ssh
root> chown -R $USER:$USER /home/$USER/.ssh
root> logout

# Set up your account.
local> ssh $IP_ADDR
user> vi .bash_aliases
  # Add this at least.
  alias mo='cd /var/web/mushroom-observer && sudo su mo'
user> sudo su

# Set up root account.
root> vi /root/.bashrc
  # Add these at end.
  export CFLAGS="-O3 -m64"
  alias mo='cd /var/web/mushroom-observer && su mo'
root> source /root/.bashrc
root> vi /etc/ssh/sshd_config
  PermitRootLogin no

# Install core packages.
root> apt-get update
root> apt-get upgrade -y
root> apt-get install -y build-essential man telnet wget curl vim emacs \
                         iptables mlocate lynx ntp

# Configure firewall. (22=ssh, 80=http, 25=smtp, 3306=mysql, 53=dns)
root> iptables -F
root> iptables -P INPUT ACCEPT
root> iptables -P OUTPUT ACCEPT
root> iptables -P FORWARD ACCEPT
root> iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
root> iptables -A INPUT -i lo -j ACCEPT
root> iptables -A INPUT -p icmp -j ACCEPT
root> iptables -A INPUT -m state --state NEW -p tcp --dport 22   -j ACCEPT
root> iptables -A INPUT -m state --state NEW -p tcp --dport 80   -j ACCEPT
root> iptables -A INPUT -m state --state NEW -p tcp --dport 25   -j ACCEPT
root> iptables -A INPUT -m state --state NEW -p tcp --dport 3306 -j ACCEPT
root> iptables -A INPUT -m state --state NEW -p tcp --dport 53   -j ACCEPT
root> iptables -A INPUT -m state --state NEW -p udp --dport 53   -j ACCEPT
root> iptables -A INPUT   -j REJECT --reject-with icmp-host-prohibited
root> iptables -A FORWARD -j REJECT --reject-with icmp-host-prohibited
root> iptables-save > /etc/firewall.conf
root> chmod 600 /etc/firewall.conf
root> vi /etc/rc.local
  iptables-restore < /etc/firewall.conf

# Install most of the modules that we will need (except ruby).
root> apt-get install -y mysql-server mysql-client libmysqlclient-dev \
          libcurl4-openssl-dev libssl-dev git nginx-extras libyaml-dev \
          imagemagick libmagickcore-dev libmagickwand-dev libjpeg-dev

# Install rvm and ruby.
root> curl -sSL https://rvm.io/mpapis.asc | sudo gpg --import -
root> curl -sSL https://get.rvm.io | bash -s stable --ruby=2.1.5
root> gpasswd -a mo rvm
root> echo "gem: --no-document" > /etc/gemrc
root> echo "gem: --no-document" > /root/.gemrc
root> echo "gem: --no-document" > /home/mo/.gemrc
root> echo "source /usr/local/rvm/scripts/rvm" >> /root/.bashrc
root> echo "source /usr/local/rvm/scripts/rvm" >> /home/mo/.bashrc

# Create directory for rails app.
root> mkdir /var/web
root> mkdir /var/web/mo
root> chown mo:mo /var/web/mo
root> chmod 750 /var/web/mo
root> ln -s mo /var/web/mushroom-observer

# Make sure nginx user has access to rails directories.
root> usermod -a -G mo www-data

# Install and configure rails apps.
root> cd /var/web/mushroom-observer
root> su mo
mo> git clone https://github.com/MushroomObserver/mushroom-observer .
[NJW: Remember to switch to another branch if you are testing this process
on code not on the master branch.]

mo> mkdir log log/old tmp tmp/pids tmp/sockets
mo> mkdir public/images/{thumb,320,640,960,1280,orig}
mo> ln -s images public/local_images
mo> cp config/etc/bash_aliases.sh ~/.bash_aliases
mo> vi config/consts-site.rb
  MushroomObserver::Application.configure do
    config.action_mailer.smtp_settings[:password] = "xxx"
    config.pivotal_enabled = true
    config.pivotal_token = "xxx"
    config.image_sources[:cdmr].delete(:write)
  end
mo> vi config/database.yml
  # Replace with this:
  production:
    adapter:  mysql2
    database: mo_production
    host:     db.mushroomobserver.org
    username: mo
    password: xxx
    socket:   /var/run/mysqld/mysqld.sock
    encoding: utf8
# Ping the database to make sure everything's working right.
mo> mysqladmin --protocol=tcp -u mo -p'$DB_PASSWORD' --host=db.mushroomobserver.org ping

# Install gems.
mo> bundle install

# Configure nginx.
mo> exit
root> cp /var/web/mushroom-observer/config/etc/nginx.conf /etc/nginx/
root> service nginx restart
root> rm /usr/share/nginx/html/index.html    # (there's *got* to be a better way!)

# Install our programs for resizing and rotating JPEG images.
root> gcc /var/web/mushroom-observer/script/jpegresize.c -ljpeg -lm -O2 -o /usr/local/bin/jpegresize
root> gcc /var/web/mushroom-observer/script/jpegexiforient.c -o /usr/local/bin/jpegexiforient
root> cp /var/web/mushroom-observer/script/exifautotran /usr/local/bin/exifautotran
root> chmod 755 /usr/local/bin/exifautotran
root> cp /var/web/mushroom-observer/script/unicorn /etc/init.d/unicorn
root> chmod 755 /etc/init.d/unicorn
root> update-rc.d unicorn defaults

--------------------------------------------------------------------------------

# If installing database locally:
root> mysql -u root -p
  create database mo_production;
  create user 'mo'@'localhost' identified by '$DB_PASSWORD';
  grant all privileges on mo_production.* to 'mo'@'localhost' with grant option;
  exit
root> scp $SNAPSHOT_PATH/checkpoint.gz .
root> gunzip -cd checkpoint.gz | mysql -u mo -p'$DB_PASSWORD' mo_production

--------------------------------------------------------------------------------

# Test basic system now.
root> su mo
mo> env | grep RAILS_ENV
# Should print "production"!!
mo> bundle install
mo> rake db:migrate
mo> rake lang:update
mo> rake assets:precompile
mo> rails server
# Watch for errors in any of these!!

mo> unicorn_rails -c config/unicorn.rb -D
# If there are any errors you'll find them in log/unicorn.stderr.log
# ("service unicorn start" and "uni start" are shorthand for above command.)

# Apparently have to restart nginx after first time run unicorn sometimes(?)
mo> service nginx stop
mo> service nginx start

# Should start listening on port 8080.
mo> lynx localhost:8080
mo> wget localhost:8080

--------------------------------------------------------------------------------

# Set up simple mailserver using postfix.
mo> exit
root> apt-get install -y postfix mutt
  # Select "internet site" when it prompts you.
  # Change hostname to "mushroomobserver.org" (should resolve back with reverse DNS).
root> vi /etc/aliases
  # Change where root's mail goes.
  root: $USER,...
root> newaliases

# NOTE: After moving mail.mo.org to gmail, had to tweak postfix configuration:
root> vi /etc/postfix/main.cf
  # change myhostname to "mushroomobserver.org" (instead of "xxx.mushroomobserver.org")
[NJW: Not needed?  Was already set to 'ror30.mushroomobserver.org']
[JPH: I'm not sure what the purpose of this was.  Might be an RDNS thing.]

# Test mail server.
root> su $USER
user> cd
user> echo $YOUR_EMAIL > .forward
user> vi .muttrc
  set realname="$FULL_NAME"
  set from="$USER@mushroomobserver.org"
  set use_from=yes
  set envelope_from=yes
user> echo "This is a test." | mutt -s test $YOUR_EMAIL
  # (Check /var/log/mail.log and /var/log/mail.err.)
user> exit

# Configure mail for MO.
root> su mo
mo> cd
mo> vi .muttrc
  set realname="Mushroom Observer"
  set from="no-reply@mushroomobserver.org"
  set use_from=yes
  set envelope_from=yes
mo> echo root > .forward
mo> echo "This is another test." | mutt -s test $YOUR_EMAIL
mo> exit

# Configure mail for rails.
# Should come configured "out of the box".
# Ask yourself a question via the website, e.g.:
#   http://$IP_ADDR/observer/ask_user_question/252
# Probably want to tail -f log/production.log if it's throwing errors.

# Configure no-reply to bounce correctly.
root> useradd -m no-reply
root> passwd -l no-reply
root> cp /var/web/mushroom-observer/script/autoreply              /usr/local/bin/autoreply
root> cp /var/web/mushroom-observer/config/etc/no-reply.muttrc    /home/no-reply/.muttrc
root> cp /var/web/mushroom-observer/config/etc/no-reply.autoreply /home/no-reply/.autoreply
root> cp /var/web/mushroom-observer/config/etc/no-reply.forward   /home/no-reply/.forward
root> chmod 644 /home/no-reply/.[maf]*
root> chmod 755 /usr/local/bin/autoreply

--------------------------------------------------------------------------------

# Set up password-less ssh for image transfers.
mo> su mo
mo> ssh-keygen -t rsa
  # Just press return three times, tell it to overwrite id_rsa.pub if it asks.
mo> ssh-copy-id -i ~/.ssh/id_rsa.pub cdmr@images.digitalmycology.com
  # Enter password.
# If ssh-copy-id doesn't work, try this: (See: http://www.phcomp.co.uk/Tutorials/Unix-And-Linux/ssh-passwordless-login.html)
mo> cat ~/.ssh/id_rsa.pub | ssh cdmr@images.digitalmycology.com 'umask 077; mkdir .ssh; cat >> .ssh/authorized_keys'
mo> ssh cdmr@images.digitalmycology.com echo hello world

# Set up logrotate to archive unicorn and rails logs.
mo> exit
root> vi /etc/logrotate.d/unicorn
  /var/web/mushroom-observer/log/*.log {
    daily
    missingok
    rotate 7
    dateext
    compress
    delaycompress
    sharedscripts
    postrotate
      kill -HUP `cat /var/web/mushroom-observer/tmp/pids/unicorn.pid`
      mv /var/web/mushroom-observer/log/*.gz /var/web/mushroom-observer/log/old/
    endscript
  }
root> su mo

# Grab thumbnails from image server.  (This takes hours!)
mo> rsync -av cdmr@images.digitalmycology.com:images.digitalmycology.com/thumb public/images
mo> rsync -av cdmr@images.digitalmycology.com:images.digitalmycology.com/320 public/images

# Install cron jobs.
mo> crontab /var/web/mushroom-observer/config/etc/crontab

--------------------------------------------------------------------------------

# A few post-installation sanity-checks.  Reboot after everything is done,
# then check the following.

# Make sure firewall is working.  If there are more than a few lines it is
# probably correct, but you can also compare it with another server.
root> iptables-save

# Make sure all the critical processes started automatically.
# Look for sshd, nginx, unicorn, mysqld, postfix.
root> ps -ef | grep sshd
root> ps -ef | grep nginx
root> ps -ef | grep unicorn
root> ps -ef | grep mysqld
root> ps -ef | grep postfix

# If any are missing, do this on ubuntu/debian:
root> update-rc.d $SERVICE defaults

# Make sure date and time and timezone are correct!
root> date

