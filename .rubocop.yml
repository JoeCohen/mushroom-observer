require:
  - rubocop-performance
  - rubocop-rails

inherit_from: .rubocop_todo.yml

# RuboCop configuration
# Uses Rubcop's default configuration, except as specified below
# For more info, see http://rubocop.readthedocs.io/en/latest/configuration/

# WARNING: .codeclimate.yml can specify the RuboCop version ('channel') used
# by Code Climate, which can be different than the version in Gemfile.lock
# See docs.codeclimate.com/docs/rubocop#section-using-rubocop-s-newer-versions
# Therefore .codeclimate.yml should be updated whenever we update RuboCop

AllCops:

  ###################### Exclusions ############################################
  # Completely ignore the following
  Exclude:
    - .codeclimate.yml
    - app/assets/javascripts/bootstrap.js
    - app/assets/javascripts/jquery.js
    - app/assets/javascripts/jstz.js
    - app/assets/javascripts/lightbox.js
    - "app/views/api/**/*"
    - "db/**/*"
    - "log/**/*"
    - public/design_test/jquery-1.5.2.min.js
    # We need not check these scripts, and some of them cause Rubocop errors
    - "script/old/**/*"
    # not Ruby
    - script/perf_monitor
    - "tmp/**/*"

###################### Global Enables #########################################
# Enable pending cops added by recent RuboCop versions

# (0.83)
Layout/EmptyLinesAroundAttributeAccessor:
  Enabled: true

# (0.82)
Layout/SpaceAroundMethodCallOperator:
  Enabled: true

# (0.84)
Lint/DeprecatedOpenSSLConstant:
  Enabled: true

# (0.88)
Lint/DuplicateElsifCondition:
  Enabled: true

# (0.85)
Lint/MixedRegexpCaptureTypes:
  Enabled: true

# (0.81)
Lint/RaiseException:
  Enabled: true

# (0.81)
Lint/StructNewOverride:
  Enabled: true

# (0.87)
Style/AccessorGrouping:
  Enabled: true

# (0.88)
Style/ArrayCoercion:
  Enabled: true

# (0.87)
Style/BisectedAttrAccessor:
  Enabled: true

# (0.88)
Style/CaseLikeIf:
  Enabled: true

# (0.82)
Style/ExponentialNotation:
  Enabled: true

# (0.88)
Style/HashAsLastArrayItem:
  Enabled: true

# (0.80)
Style/HashEachMethods:
  Enabled: true

# (0.88)
Style/HashLikeCase:
  Enabled: true

# (0.80)
Style/HashTransformKeys:
  Enabled: true

# (0.80)
Style/HashTransformValues:
  Enabled: true

# (0.87)
Style/RedundantAssignment:
  Enabled: true

# (0.86)
Style/RedundantFetchBlock:
  Enabled: true

# (0.88)
Style/RedundantFileExtensionInRequire:
  Enabled: true

# (0.85)
Style/RedundantRegexpCharacterClass:
  Enabled: true

# (0.85)
Style/RedundantRegexpEscape:
  Enabled: true

# (0.83)
Style/SlicingWithRange:
  Enabled: true

###################### Global Disables, Enables ################################

# Disable because it does not work with Unicode in Ruby 2.4
# Cop supports --auto-correct.
Performance/Casecmp:
  Enabled: false

# MO uses HABTM extensively; RuboCop prefers the newer has_many through
# Switching would require a migration process, detailed here:
# http://chrisrolle.com/en/blog/migration-path-from-habtm-to-has_many-through
# It's not worth the effort
Rails/HasAndBelongsToMany:
  Enabled: false

# Allow non-ascii characters in comments; we need to use accented chars
Style/AsciiComments:
  Enabled: false

# Repeat the RuboCop default because CodeClimate silently overrides it
Style/DateTime:
  Enabled: false

# When the cop is enabled, the default is require_parentheses.
Style/MethodCallWithArgsParentheses:
  Enabled: true

###################### Options #################################################

Metrics/AbcSize:
# Can we try relaxing this one?  Even short simple methods sometimes exceed
# 15 or 16.  Simplifying them further just forces us to make tons of tiny
# trivial methods with really cumbersome names, without actually making
# the code any better.
# Max: 15
  Max: 20
  Exclude:
    # This Cop makes less sense in tests, we regularly ignore it.
    - "test//**/*"

Metrics/BlockLength:
  Exclude:
    # This Cop makes less sense in tests, we regularly ignore it.
    - "test//**/*"

Metrics/ClassLength:
# Relaxed metrics based on CodeClimages default .rubocop.yml
# Max: 100
  Max: 250
  Exclude:
    # This Cop makes less sense in tests, we regularly ignore it.
    - "test//**/*"

Metrics/CyclomaticComplexity:
  Exclude:
    # This Cop makes less sense in tests, we regularly ignore it.
    - "test//**/*"

Metrics/MethodLength:
# Relaxed metrics based on CodeClimages default .rubocop.yml
# Max: 10
  Max: 30
  Exclude:
    # This Cop makes less sense in tests, we regularly ignore it.
    - "test//**/*"

Metrics/ModuleLength:
# Relaxed metrics based on CodeClimages default .rubocop.yml
# Max: 100
  Max: 250
  Exclude:
    # This Cop makes less sense in tests, we regularly ignore it.
    - "test//**/*"

Metrics/PerceivedComplexity:
  Exclude:
    # This Cop makes less sense in tests, we regularly ignore it.
    - "test//**/*"

# Repeat the default because Codeclimate ignores it as of 2019-07-09
Layout/HashAlignment:
  EnforcedColonStyle: key

# Rubocop supports multiple options and MO uses a non-default
Layout/DotPosition:
  EnforcedStyle: trailing

# Rubocop supports multiple options and MO uses a non-default
Layout/LineLength:
  # RuboCop default is 120 as of 0.84
  Max: 80

Performance/RegexpMatch:
  # Autocorrect changes "something.match(regexp)" to "something.match?(regexp)".
  # The latter throws an error when something == nil:
  #   undefined method `match?' for nil:NilClass
  # So manually correct to: regexp.match?(something)
  AutoCorrect: false

# Causes test failures when used with Rubocop auto-correct
Rails/DynamicFindBy:
  AutoCorrect: false

Style/FrozenStringLiteralComment:
  # When it's auto-corrected in Ruby 2.4, our test suite won't run.
  # We get: "can't modify frozen String" error
  AutoCorrect: true

# Repeat the RuboCop defaults because CodeClimate silently overrides them
Style/PercentLiteralDelimiters:
  PreferredDelimiters:
    default: "()"
    '%i':    "[]"
    '%I':    "[]"
    '%r':    "{}"
    '%w':    "[]"
    '%W':    "[]"

# Rubocop supports multiple options and MO uses a non-default
Style/StringLiterals:
  EnforcedStyle: double_quotes

# Rubocop supports multiple options and MO uses a non-default
Style/StringLiteralsInInterpolation:
  EnforcedStyle: double_quotes

# MO uses [] not %i() or %I()
Style/SymbolArray:
  EnforcedStyle: brackets

# I can't figure out how to get exploded to work with API.
Style/RaiseArgs:
  EnforcedStyle: compact
