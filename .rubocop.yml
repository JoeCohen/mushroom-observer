inherit_from: .rubocop_todo.yml

# RuboCop configuration
# Uses Rubcop's default configuration, except as specified below
# For more info, see http://rubocop.readthedocs.io/en/latest/configuration/

AllCops:
  # Ignore cops for Ruby versions which are newer than that used by MO
  TargetRubyVersion: 2.4.1

# Temporarily disable some cops to see if I can make Codeclimate work again
# Style/Encoding:
#   Enabled: false
# Style/FrozenStringLiteralComment:
#  Enabled: false

###################### Exclusions ##############################################

# Completely ignore the following
AllCops:
  Exclude:
    - .codeclimate.yml
    - app/assets/javascripts/bootstrap.js
    - app/assets/javascripts/jquery.js
    - app/assets/javascripts/jstz.js
    - app/assets/javascripts/lightbox.js
    - "app/views/api/**/*"
    - "db/**/*"
    - "log/**/*"
    - public/design_test/jquery-1.5.2.min.js
    # We need not check these scripts, and some of them cause Rubocop errors
    - "script/old/**/*"
    - "tmp/**/*"

###################### Global Disables #########################################
# Disable because enforcement takes up an extra line
Layout/EmptyLineAfterMagicComment:
  Enabled: false

# Disable because it casecmp does not work with Unicode in Ruby 2.4
# Cop supports --auto-correct.
Performance/Casecmp:
  Enabled: false

Performance/RegexpMatch:
  # Autocorrect changes "something.match(regexp)" to "something.match?(regexp)".
  # The latter throws an error when something == nil:
  # undefined method `match?' for nil:NilClass
  # So manually correct to: regexp.match?(something)
  AutoCorrect: false

# Causes test failures when used with Rubocop auto-correct
Rails/DynamicFindBy:
  Enabled: False

# Disable using Rails < 5.0; it's relevant only to >= 5.0
Rails/HttpPositionalArguments:
  Enabled: False

###################### Metrics #################################################

Metrics/AbcSize:
# Can we try relaxing this one?  Even short simple methods sometimes exceed
# 15 or 16.  Simplifying them further just forces us to make tons of tiny
# trivial methods with really cumbersome names, without actually making
# the code any better.
# Max: 15
  Max: 20
  Exclude:
    # This Cop makes less sense in tests, we regularly ignore it.
    - "test//**/*"

Metrics/BlockLength:
  Exclude:
    # This Cop makes less sense in tests, we regularly ignore it.
    - "test//**/*"

Metrics/ClassLength:
# Relaxed metrics based on CodeClimages default .rubocop.yml
# Max: 100
  Max: 250
  Exclude:
    # This Cop makes less sense in tests, we regularly ignore it.
    - "test//**/*"

Metrics/CyclomaticComplexity:
  Exclude:
    # This Cop makes less sense in tests, we regularly ignore it.
    - "test//**/*"

Metrics/MethodLength:
# Relaxed metrics based on CodeClimages default .rubocop.yml
# Max: 10
  Max: 30
  Exclude:
    # This Cop makes less sense in tests, we regularly ignore it.
    - "test//**/*"

Metrics/ModuleLength:
# Relaxed metrics based on CodeClimages default .rubocop.yml
# Max: 100
  Max: 250
  Exclude:
    # This Cop makes less sense in tests, we regularly ignore it.
    - "test//**/*"

Metrics/PerceivedComplexity:
  Exclude:
    # This Cop makes less sense in tests, we regularly ignore it.
    - "test//**/*"

###################### Layout and Style ########################################

# Rubocop supports multiple options and MO uses a non-default
Layout/DotPosition:
  EnforcedStyle: trailing

# Allow non-ascii characters in comments; we need to use accented chars
Style/AsciiComments:
  Enabled: false

# Repeat the RuboCop defaults because CodeClimate silently overrides them
Style/PercentLiteralDelimiters:
  PreferredDelimiters:
    default: "()"
    '%i':    "[]"
    '%I':    "[]"
    '%r':    "{}"
    '%w':    "[]"
    '%W':    "[]"

# Rubocop supports multiple options and MO uses a non-default
Style/StringLiterals:
  EnforcedStyle: double_quotes

# Rubocop supports multiple options and MO uses a non-default
Style/StringLiteralsInInterpolation:
  EnforcedStyle: double_quotes

# MO uses [] not %i() or %I()
Style/SymbolArray:
  EnforcedStyle: brackets

# I can't figure out how to get exploded to work with API.
Style/RaiseArgs:
  EnforcedStyle: compact
