#!/usr/bin/env ruby
#
#  USAGE::
#
#    script/monitor_top
#
#  DESCRIPTION::
#
#  Parse memory and swap usage from "top" and log result.  Restarts the server
#  (unicorn) if memory and swap usage go too high.
#
################################################################################

ROOT = File.expand_path("../..", __FILE__)
LOG_FILE = "#{ROOT}/log/top.log"
UNICORN_FILE = "#{ROOT}/tmp/unicorn.pid"
PASSENGER_FILE = "#{ROOT}/tmp/restart.txt"

def parse_top(top, prefix)
  match = top.match(/#{prefix}:\D+(\d+)\D+(\d+)/)
  if match
    return match[1..2].map(&:to_f)
  end
end

date = `date +%Y%m%d:%H%M%S`.chomp

top = `top -bn 1 | head -5`

mem_total, mem_used = parse_top(top, "Mem")
swap_total, swap_used = parse_top(top, "Swap")

mem_pct = mem_used / mem_total * 100
swap_pct = swap_used / swap_total * 100

size = begin
         File.size(LOG_FILE)
       rescue
         nil
       end
File.open(LOG_FILE, "a") do |file|
  file.print "date                   memory           swap\n" unless size
  file.printf("%-16s   %5.2fG %5.1f%%   %5.2fG %5.1f%%\n",
              date, mem_used / 1e6, mem_pct, swap_used / 1e6, swap_pct)
end

if swap_pct > 50 && mem_pct > 99
  if File.exist?(UNICORN_FILE)
    pid = File.read(UNICORN_FILE).chomp
    system("kill -HUP #{pid}")
    $stderr.puts("Restarted server!")
  elsif File.exist?(PASSENGER_FILE)
    File.open(PASSENGER_FILE, "w") {}
    $stderr.puts("Restarted server!")
  else
    $stderr.puts("Time to restart server, but couldn't find unicorn or passenger!")
  end
end

exit 0
